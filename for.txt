for episode in range(num_episodes):
    game_over = False
    game_close = False
    reward = 0
    food = Food()
    snake = Snake()
    score = Score()
    disp = Display()
    state = get_state(snake, food)
    while not game_over:
        score.frame_iteration = score.frame_iteration + 1
        game_over2 = False
        action = choose_action(state)
        snake.move_snake(action)
        snake.update_position()
        if snake.x >= disp.display_width or snake.x < 0 or snake.y >= disp.display_height or snake.y < 0:
            snake.x = Display().display_width / 2
            snake.y = Display().display_height / 2
            score.sum_disp()
            snake.length = 1
            snake.snake_list = []
            score.score = 0
            game_over2 = True
            score.frame_iteration = 0
        for x in snake.snake_list[:-1]:
            if x == [snake.x, snake.y]:
                snake.x = Display().display_width / 2
                snake.y = Display().display_height / 2
                score.sum_disp()
                snake.length = 1
                snake.snake_list = []
                score.score = 0
                game_over2 = True
                score.frame_iteration = 0
        reward = get_reward(snake, food, game_over2,score.frame_iteration)
        next_state = get_state(snake, food)
        update_q_table(state, action, reward, next_state)
        state = next_state
        for event in pygame.event.get():
            if event.type == pygame.KEYDOWN:
                if event.key == pygame.K_q:
                    game_close = True
        if game_close:
            break
        food.analyze_score(snake, score, disp)
        snake.add_block_in_snake()

        disp.update_screen()
        food.draw_food(pygame, disp)
        snake.draw_snake(disp, pygame)
        score.draw_score(disp)
        pygame.display.update()
        disp.clock.tick(snake.speed)
    pygame.quit()
    quit()